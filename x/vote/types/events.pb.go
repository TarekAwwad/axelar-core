// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/vote/v1beta1/events.proto

package types

import (
	fmt "fmt"
	exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_axelarnetwork_axelar_core_x_vote_exported "github.com/axelarnetwork/axelar-core/x/vote/exported"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Voted struct {
	Module string                                                      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	PollID github_com_axelarnetwork_axelar_core_x_vote_exported.PollID `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3,customtype=github.com/axelarnetwork/axelar-core/x/vote/exported.PollID" json:"poll_id"`
	State  exported.PollState                                          `protobuf:"varint,3,opt,name=state,proto3,enum=axelar.vote.exported.v1beta1.PollState" json:"state,omitempty"`
	Voter  github_com_cosmos_cosmos_sdk_types.ValAddress               `protobuf:"bytes,4,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"voter,omitempty"`
	Weight github_com_cosmos_cosmos_sdk_types.Uint                     `protobuf:"bytes,5,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"weight"`
}

func (m *Voted) Reset()         { *m = Voted{} }
func (m *Voted) String() string { return proto.CompactTextString(m) }
func (*Voted) ProtoMessage()    {}
func (*Voted) Descriptor() ([]byte, []int) {
	return fileDescriptor_3af91494c39040fc, []int{0}
}
func (m *Voted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voted.Merge(m, src)
}
func (m *Voted) XXX_Size() int {
	return m.Size()
}
func (m *Voted) XXX_DiscardUnknown() {
	xxx_messageInfo_Voted.DiscardUnknown(m)
}

var xxx_messageInfo_Voted proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Voted)(nil), "axelar.vote.v1beta1.Voted")
}

func init() { proto.RegisterFile("axelar/vote/v1beta1/events.proto", fileDescriptor_3af91494c39040fc) }

var fileDescriptor_3af91494c39040fc = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbf, 0x4e, 0xe3, 0x40,
	0x10, 0xc6, 0xbd, 0xb9, 0xd8, 0xa7, 0xb3, 0x4e, 0x57, 0xf8, 0x10, 0xb2, 0x52, 0xd8, 0x16, 0x4d,
	0xdc, 0xc4, 0x96, 0xa1, 0x44, 0x14, 0x44, 0x48, 0x51, 0x0a, 0x04, 0x32, 0x22, 0x05, 0x0d, 0x72,
	0xb2, 0x83, 0x63, 0xc5, 0xc9, 0x58, 0xbb, 0x9b, 0x3f, 0xbc, 0x05, 0x8f, 0x95, 0x32, 0x65, 0x44,
	0x61, 0x81, 0xf3, 0x16, 0x54, 0xc8, 0xf6, 0x2a, 0x0a, 0x1d, 0x54, 0x3b, 0xa3, 0xfd, 0xbe, 0xdf,
	0xce, 0x37, 0xab, 0x3b, 0xd1, 0x0a, 0xd2, 0x88, 0xf9, 0x0b, 0x14, 0xe0, 0x2f, 0x82, 0x21, 0x88,
	0x28, 0xf0, 0x61, 0x01, 0x33, 0xc1, 0xbd, 0x8c, 0xa1, 0x40, 0xe3, 0x7f, 0xad, 0xf0, 0x4a, 0x85,
	0x27, 0x15, 0xad, 0xa3, 0x18, 0x63, 0xac, 0xee, 0xfd, 0xb2, 0xaa, 0xa5, 0x2d, 0xf7, 0x10, 0x06,
	0xab, 0x0c, 0x99, 0x00, 0xba, 0xa7, 0x8a, 0xe7, 0x0c, 0x24, 0xf4, 0x64, 0xdb, 0xd0, 0xd5, 0x01,
	0x0a, 0xa0, 0xc6, 0xb1, 0xae, 0x4d, 0x91, 0xce, 0x53, 0x30, 0x89, 0x43, 0xdc, 0x3f, 0xa1, 0xec,
	0x8c, 0x27, 0xfd, 0x77, 0x86, 0x69, 0xfa, 0x98, 0x50, 0xb3, 0xe1, 0x10, 0xb7, 0xd9, 0xbd, 0x5e,
	0xe7, 0xb6, 0xf2, 0x9a, 0xdb, 0xe7, 0x71, 0x22, 0xc6, 0xf3, 0xa1, 0x37, 0xc2, 0xa9, 0x5f, 0xbf,
	0x37, 0x03, 0xb1, 0x44, 0x36, 0x91, 0x5d, 0x67, 0x84, 0x0c, 0xfc, 0xd5, 0xd7, 0x21, 0xbc, 0x5b,
	0x4c, 0xd3, 0xfe, 0x55, 0x91, 0xdb, 0x5a, 0x5d, 0x85, 0x5a, 0x49, 0xef, 0x53, 0xe3, 0x42, 0x57,
	0xb9, 0x88, 0x04, 0x98, 0xbf, 0x1c, 0xe2, 0xfe, 0x3b, 0x6d, 0x7b, 0x87, 0x71, 0xf7, 0x76, 0x99,
	0xa1, 0xc2, 0xdc, 0x95, 0xf2, 0xb0, 0x76, 0x19, 0x3d, 0x5d, 0x2d, 0x95, 0xcc, 0x6c, 0x3a, 0xc4,
	0xfd, 0xdb, 0x0d, 0x3e, 0x72, 0xbb, 0x73, 0x30, 0xe0, 0x08, 0xf9, 0x14, 0xb9, 0x3c, 0x3a, 0x9c,
	0x4e, 0xe4, 0x16, 0x06, 0x51, 0x7a, 0x49, 0x29, 0x03, 0xce, 0xc3, 0xda, 0x6f, 0xf4, 0x74, 0x6d,
	0x09, 0x49, 0x3c, 0x16, 0xa6, 0x5a, 0x91, 0x7c, 0x19, 0xb7, 0xfd, 0x0d, 0xda, 0x7d, 0x32, 0x13,
	0xa1, 0xb4, 0x77, 0x6f, 0xd6, 0xef, 0x96, 0xb2, 0x2e, 0x2c, 0xb2, 0x29, 0x2c, 0xf2, 0x56, 0x58,
	0xe4, 0x65, 0x67, 0x29, 0x9b, 0x9d, 0xa5, 0x6c, 0x77, 0x96, 0xf2, 0x10, 0xfc, 0x64, 0x7b, 0x15,
	0x7d, 0xa8, 0x55, 0x5f, 0x76, 0xf6, 0x19, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xed, 0x5a, 0x53, 0x2b,
	0x02, 0x00, 0x00,
}

func (m *Voted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.PollID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PollID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Voted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PollID != 0 {
		n += 1 + sovEvents(uint64(m.PollID))
	}
	if m.State != 0 {
		n += 1 + sovEvents(uint64(m.State))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Voted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollID", wireType)
			}
			m.PollID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollID |= github_com_axelarnetwork_axelar_core_x_vote_exported.PollID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= exported.PollState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
